CSCI - Lecture 11 - 9/21/2018

Announcements
  Deadlines got extended
  Quiz 3
  Assignment 3
  Lab 3

Objectives
    Recap
      Variable dimensions
    Today
      Generating matrices
      Accessing matrix elements (Indexing)
      Scalar and Array operations on vectors and matrices
      Logical vectors (or matrices)
      Freefall problem example

Dimensions of Data
  Scalar
    Single Number
    x = 3;
  Vector
    Multiple numbers in a row / column
    v = [1 2 3]
  Matrix
    Multiple numbers in a grid
    m = [1:3;6,11,-2]
    must have the same number of elements in every row
    must have the same number of elements in every column

Matrix elements
  To get element of matrix, use:
    M(row,column)
    >> M(2,1)
  Can also extract entire row
    M(n,:)
    >> M(2,:)
  Extract entire column
    M(:,n)
    >> M(:,2)
  : equivalent to 1:end or 1:1:end

Array operations on vectors or matrices
  Element wise
Matrices Element wide
  >> x = [2, 3, 4];
  >> y = [4, 5, 6];
  >> z = x + y
      z = [6, 8, 10]
  If dimensions do not match, will throw an error

Array operations
  addition        = x + y
  subtraction     = x - y
  multiplication  = x .* y
  division        = x ./ y
  exponentiation  = x .^ y

  don't forget the "dot operator" for multiplication array operations
  matrix dimensions must agree

    e.g. A+B
        [1 1  + [2 2  = [3 3
         1 1]    2 2]    3 3]

    e.g. A.*B
        [1 1  + [2 2  = [2 2
         1 1]    2 2]    2 2]

Scalar operations
  m = magic(3);
  mNew = m*3;
    This will result in every element of m being multiplied by 3

  When x is a matrix and y is a Scalar
    addition        = x + y
    subtraction     = x - y
    multiplication  = x * y
    division        = x / y
    exponentiation  = x ^ y

Logical Vectors (or Matrices)
  Can use a relational expression on an entire vector
  The result will be a logical vector
  e.g.
    >> vec = [5,4,-2,0,1,-7];
    >> logicalVec = vec < 0;
    >> logicalVec
          ans = [0 0 1 0 0 1]
    >> vec(logicalVec)
          ans = [-2 -7]
    OR
    >>vec(vec<0)

    When indexing with a logical vector, will only return values where true

    % find where the fall distance exceeds the initial height
    >> logicalVecNEgative = d<=0;
    >> ind = find(logicalVecNegative,1);

Free Fall Problem
