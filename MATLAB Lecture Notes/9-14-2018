CSCI - Lecture 8 - 9/14/2018

Announcements
  Quiz 2 - Due Sunday
  Lab 1 - Due Today
  Assignment 2 - Due Sunday
  Schedulers will show up Saturday

Recap Functions
  KE Example
  Scope
Later
  Vectors/ Matrices

Pseudo Code for Kinetic Energy of Object Example
    During this time I wrapped up the homework for this weekend

Variable Scope
  example.m
    x = 5;
    y = 6;
    z = my_func(x,y)
  my_func.m
    function x = my_func(y,z)
      x = y*z
    end

  Function workspaces are different from script workspaces
  function variables are only local
    does not get written in to general workspace
  variables names do not correspond

  Functions cannot use variables not passed to it
    And it will only know them by value

  Matrices / Vectors
    All variables in MATLAB are matrices by default
    Matrix: 2D grid of numbers, indexed by row and column
    Vectors: Matrices in which on of the dimensions is 1

    Can declare row vectors like so
    x = [1 2 3] or x = [1,2,3] or x = [1;2;3]
      can be space or comma separated

      Semicolons do column vectors

    size(x): Will return dimensions of Matrix : 1,3 : Row, Column
    length(x): will return the length of a 1 dimensional vector : 3
    numel: will return the number of elements : 3

    Transpose of a vector
      use an ' after the variable
      x = [1 2 3]
      x = x'
      x = [ 1
            2
            3 ]

    Generating vectors
      Colon Operator
        x = start_val : end_val
          Will increment by 1 each time until end value
        x = 1:100 => [1 2 3 ... 100]

        x = start_val : increment_val : end_val
          Will increment by increment value
        x = 0:5:100 => [0 5 10 ... 100]

        x = [1 5 9 13 17 21 25] = 1:4:25
        x = [24 18 12 6] = 24:-6:6

      linspace Function
        linspace(start_value, end_val, num_elem)

      Concatenating Existing vectors
        Horizontal Concatenation
          x = [1 2 3]
          y = [4 5 6]

          z = [1 2 3 4 5 6]
        Vertical Concatenation
          x = [1; 2; 3]
          y = [4; 5]

          z=[x; y]

        As long as dimensions that are being concatenated between line up, they can be concatenated

      Retreiving values from a vector
        x(index)
        x=[1 2 3 4 5]
        x(4) => 4
        x(4) = 0
        x=[1 2 3 0 5]

        x(1:4) => [1 2 3 4]
        x(2:5) => [2 3 4 5]
        x(3:end)=> [3 4 5]

        One dimensional vectors can be retrieved regardless of direction

      Vector Math
        x = [1 2 3]
        y = [4 5 6]
        k = 2

        x + y = [5 7 9]
        x * k = [2 4 6]
        x + k = [3 4 5]
        x * y = err - Only works if they are orthagonal to eachother
        x / y works but not you'd expect
        x ^ y also weird

        element-by-element operations
          x.*y = [1*4,2*5,3*6]
          x./y
          x.^y
          sin(x)

``        Example:
            x=linspace(-pi, pi, 100);
            y=x.^2
            z = sin(x)

          plot(x, y)
          plot(x, z)
